name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: linux-x86_64
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
            
          # Linux ARM64 (for Raspberry Pi 4, etc.)
          - os: linux-arm64
            runs-on: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
            
          # Linux ARMv7 (for Raspberry Pi 3, etc.)
          - os: linux-armv7
            runs-on: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            cross: true
            
          # macOS x86_64
          - os: macos-x86_64
            runs-on: macos-latest
            target: x86_64-apple-darwin
            cross: false
            
          # macOS ARM64 (Apple Silicon)
          - os: macos-arm64
            runs-on: macos-latest
            target: aarch64-apple-darwin
            cross: false
            
          # Windows x86_64
          - os: windows-x86_64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc
            cross: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Package binary
        run: |
          if [ "${{ matrix.os }}" = "windows-x86_64" ]; then
            BINARY_NAME="calendar-monitor.exe"
            ARCHIVE_NAME="calendar-monitor-${{ matrix.os }}.zip"
            cp target/${{ matrix.target }}/release/$BINARY_NAME .
            # Add files to zip, including LICENSE if it exists
            if [ -f LICENSE ]; then
              zip $ARCHIVE_NAME $BINARY_NAME README.md LICENSE
            else
              zip $ARCHIVE_NAME $BINARY_NAME README.md
            fi
          else
            BINARY_NAME="calendar-monitor"
            ARCHIVE_NAME="calendar-monitor-${{ matrix.os }}.tar.gz"
            cp target/${{ matrix.target }}/release/$BINARY_NAME .
            # Add files to tar, including LICENSE if it exists
            if [ -f LICENSE ]; then
              tar czf $ARCHIVE_NAME $BINARY_NAME README.md LICENSE
            else
              tar czf $ARCHIVE_NAME $BINARY_NAME README.md
            fi
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: calendar-monitor-${{ matrix.os }}
          path: calendar-monitor-${{ matrix.os }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/calendar-monitor-*/calendar-monitor-*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
